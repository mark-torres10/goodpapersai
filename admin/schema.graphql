# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Paper {
  id: ID!
  title: String
  authors: String
  journal: String
  year: Int
  doi: String
  url: String
  abstract: String
  isCurrentlyReading: Boolean
  updates(where: UpdateWhereInput! = {}, orderBy: [UpdateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UpdateWhereUniqueInput): [Update!]
  updatesCount(where: UpdateWhereInput! = {}): Int
}

input PaperWhereUniqueInput {
  id: ID
}

input PaperWhereInput {
  AND: [PaperWhereInput!]
  OR: [PaperWhereInput!]
  NOT: [PaperWhereInput!]
  id: IDFilter
  title: StringFilter
  authors: StringFilter
  journal: StringFilter
  year: IntFilter
  doi: StringFilter
  url: StringFilter
  abstract: StringFilter
  isCurrentlyReading: BooleanFilter
  updates: UpdateManyRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UpdateManyRelationFilter {
  every: UpdateWhereInput
  some: UpdateWhereInput
  none: UpdateWhereInput
}

input PaperOrderByInput {
  id: OrderDirection
  title: OrderDirection
  authors: OrderDirection
  journal: OrderDirection
  year: OrderDirection
  doi: OrderDirection
  url: OrderDirection
  abstract: OrderDirection
  isCurrentlyReading: OrderDirection
}

input PaperUpdateInput {
  title: String
  authors: String
  journal: String
  year: Int
  doi: String
  url: String
  abstract: String
  isCurrentlyReading: Boolean
  updates: UpdateRelateToManyForUpdateInput
}

input UpdateRelateToManyForUpdateInput {
  disconnect: [UpdateWhereUniqueInput!]
  set: [UpdateWhereUniqueInput!]
  create: [UpdateCreateInput!]
  connect: [UpdateWhereUniqueInput!]
}

input PaperUpdateArgs {
  where: PaperWhereUniqueInput!
  data: PaperUpdateInput!
}

input PaperCreateInput {
  title: String
  authors: String
  journal: String
  year: Int
  doi: String
  url: String
  abstract: String
  isCurrentlyReading: Boolean
  updates: UpdateRelateToManyForCreateInput
}

input UpdateRelateToManyForCreateInput {
  create: [UpdateCreateInput!]
  connect: [UpdateWhereUniqueInput!]
}

type Update {
  id: ID!
  paper: Paper
  paperTitle: String
  message: String
  timestamp: DateTime
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UpdateWhereUniqueInput {
  id: ID
}

input UpdateWhereInput {
  AND: [UpdateWhereInput!]
  OR: [UpdateWhereInput!]
  NOT: [UpdateWhereInput!]
  id: IDFilter
  paper: PaperWhereInput
  paperTitle: StringFilter
  message: StringFilter
  timestamp: DateTimeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UpdateOrderByInput {
  id: OrderDirection
  paperTitle: OrderDirection
  message: OrderDirection
  timestamp: OrderDirection
}

input UpdateUpdateInput {
  paper: PaperRelateToOneForUpdateInput
  paperTitle: String
  message: String
  timestamp: DateTime
}

input PaperRelateToOneForUpdateInput {
  create: PaperCreateInput
  connect: PaperWhereUniqueInput
  disconnect: Boolean
}

input UpdateUpdateArgs {
  where: UpdateWhereUniqueInput!
  data: UpdateUpdateInput!
}

input UpdateCreateInput {
  paper: PaperRelateToOneForCreateInput
  paperTitle: String
  message: String
  timestamp: DateTime
}

input PaperRelateToOneForCreateInput {
  create: PaperCreateInput
  connect: PaperWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPaper(data: PaperCreateInput!): Paper
  createPapers(data: [PaperCreateInput!]!): [Paper]
  updatePaper(where: PaperWhereUniqueInput!, data: PaperUpdateInput!): Paper
  updatePapers(data: [PaperUpdateArgs!]!): [Paper]
  deletePaper(where: PaperWhereUniqueInput!): Paper
  deletePapers(where: [PaperWhereUniqueInput!]!): [Paper]
  createUpdate(data: UpdateCreateInput!): Update
  createUpdates(data: [UpdateCreateInput!]!): [Update]
  updateUpdate(where: UpdateWhereUniqueInput!, data: UpdateUpdateInput!): Update
  updateUpdates(data: [UpdateUpdateArgs!]!): [Update]
  deleteUpdate(where: UpdateWhereUniqueInput!): Update
  deleteUpdates(where: [UpdateWhereUniqueInput!]!): [Update]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  papers(where: PaperWhereInput! = {}, orderBy: [PaperOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaperWhereUniqueInput): [Paper!]
  paper(where: PaperWhereUniqueInput!): Paper
  papersCount(where: PaperWhereInput! = {}): Int
  updates(where: UpdateWhereInput! = {}, orderBy: [UpdateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UpdateWhereUniqueInput): [Update!]
  update(where: UpdateWhereUniqueInput!): Update
  updatesCount(where: UpdateWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
